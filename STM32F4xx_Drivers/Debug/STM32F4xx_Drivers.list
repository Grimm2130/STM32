
STM32F4xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000344  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004ec  080004f4  000104f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004ec  080004ec  000104f4  2**0
                  CONTENTS
  4 .ARM          00000000  080004ec  080004ec  000104f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004ec  080004f4  000104f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004ec  080004ec  000104ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004f0  080004f0  000104f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000104f4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000104f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a0d  00000000  00000000  0001051e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000028a  00000000  00000000  00010f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  000111b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000090  00000000  00000000  00011270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000122f  00000000  00000000  00011300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000bc8  00000000  00000000  0001252f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000446d  00000000  00000000  000130f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00017564  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000210  00000000  00000000  000175b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080004d4 	.word	0x080004d4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080004d4 	.word	0x080004d4

080001e8 <get_gpio_addr_offset>:
 *
 * des 			:	return an unsigned offset of the GPIO port relative to GPIO A
 *
 *
 * */
uint8_t get_gpio_addr_offset(gpio_hndlr_t* pGpio){
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	// Define offset variable
	uint8_t offset = 0;
 80001f0:	2300      	movs	r3, #0
 80001f2:	73fb      	strb	r3, [r7, #15]
	for(uint32_t i = GPIO_A_BASE_ADDR; i <= GPIO_K_BASE_ADDR; i+= GPIOx_ADDR_OFF){
 80001f4:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <get_gpio_addr_offset+0x40>)
 80001f6:	60bb      	str	r3, [r7, #8]
 80001f8:	e00a      	b.n	8000210 <get_gpio_addr_offset+0x28>
		// Check if at GPIO address
		if(i == (uint32_t) pGpio){
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	68ba      	ldr	r2, [r7, #8]
 80001fe:	429a      	cmp	r2, r3
 8000200:	d00b      	beq.n	800021a <get_gpio_addr_offset+0x32>
			break;
		}
		offset++;
 8000202:	7bfb      	ldrb	r3, [r7, #15]
 8000204:	3301      	adds	r3, #1
 8000206:	73fb      	strb	r3, [r7, #15]
	for(uint32_t i = GPIO_A_BASE_ADDR; i <= GPIO_K_BASE_ADDR; i+= GPIOx_ADDR_OFF){
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800020e:	60bb      	str	r3, [r7, #8]
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	4a06      	ldr	r2, [pc, #24]	; (800022c <get_gpio_addr_offset+0x44>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d9f0      	bls.n	80001fa <get_gpio_addr_offset+0x12>
 8000218:	e000      	b.n	800021c <get_gpio_addr_offset+0x34>
			break;
 800021a:	bf00      	nop
	}
	return offset;
 800021c:	7bfb      	ldrb	r3, [r7, #15]
}
 800021e:	4618      	mov	r0, r3
 8000220:	3714      	adds	r7, #20
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr
 8000228:	40020000 	.word	0x40020000
 800022c:	40022800 	.word	0x40022800

08000230 <GPIOx_init>:
 *
 *	note		: 	None
 *
 *	ret			: 	None
 */
uint8_t GPIOx_init(gpio_hndlr_t* pGpio, uint8_t pinNum, uint8_t state, uint8_t type){
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	4608      	mov	r0, r1
 800023a:	4611      	mov	r1, r2
 800023c:	461a      	mov	r2, r3
 800023e:	4603      	mov	r3, r0
 8000240:	70fb      	strb	r3, [r7, #3]
 8000242:	460b      	mov	r3, r1
 8000244:	70bb      	strb	r3, [r7, #2]
 8000246:	4613      	mov	r3, r2
 8000248:	707b      	strb	r3, [r7, #1]
	uint8_t fault = 0;
 800024a:	2300      	movs	r3, #0
 800024c:	73fb      	strb	r3, [r7, #15]
	// Set Mode of pin
	switch(state){
 800024e:	78bb      	ldrb	r3, [r7, #2]
 8000250:	2b03      	cmp	r3, #3
 8000252:	d846      	bhi.n	80002e2 <GPIOx_init+0xb2>
 8000254:	a201      	add	r2, pc, #4	; (adr r2, 800025c <GPIOx_init+0x2c>)
 8000256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800025a:	bf00      	nop
 800025c:	0800026d 	.word	0x0800026d
 8000260:	0800029f 	.word	0x0800029f
 8000264:	080002cd 	.word	0x080002cd
 8000268:	080002e9 	.word	0x080002e9

		// Mode : input
		case INPUT:
			pGpio->MODE_R &= ~(0x3 << (2*pinNum));
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	78fa      	ldrb	r2, [r7, #3]
 8000272:	0052      	lsls	r2, r2, #1
 8000274:	2103      	movs	r1, #3
 8000276:	fa01 f202 	lsl.w	r2, r1, r2
 800027a:	43d2      	mvns	r2, r2
 800027c:	401a      	ands	r2, r3
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	601a      	str	r2, [r3, #0]
			if(type){
 8000282:	787b      	ldrb	r3, [r7, #1]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d031      	beq.n	80002ec <GPIOx_init+0xbc>
				// Set input config of pin
				pGpio->PU_PD_R |= (type << (2*pinNum));
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	7879      	ldrb	r1, [r7, #1]
 800028e:	78fa      	ldrb	r2, [r7, #3]
 8000290:	0052      	lsls	r2, r2, #1
 8000292:	fa01 f202 	lsl.w	r2, r1, r2
 8000296:	431a      	orrs	r2, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	60da      	str	r2, [r3, #12]
			}
			break;
 800029c:	e026      	b.n	80002ec <GPIOx_init+0xbc>

		// Mode : output
		case OUTPUT:
			pGpio->MODE_R |= (0x1 << (2*pinNum));
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	78fa      	ldrb	r2, [r7, #3]
 80002a4:	0052      	lsls	r2, r2, #1
 80002a6:	2101      	movs	r1, #1
 80002a8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ac:	431a      	orrs	r2, r3
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	601a      	str	r2, [r3, #0]
			if(type){
 80002b2:	787b      	ldrb	r3, [r7, #1]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d01b      	beq.n	80002f0 <GPIOx_init+0xc0>
				pGpio->OTYPE_R |= (type << (pinNum));
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	7879      	ldrb	r1, [r7, #1]
 80002be:	78fa      	ldrb	r2, [r7, #3]
 80002c0:	fa01 f202 	lsl.w	r2, r1, r2
 80002c4:	431a      	orrs	r2, r3
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	605a      	str	r2, [r3, #4]
			}
			break;
 80002ca:	e011      	b.n	80002f0 <GPIOx_init+0xc0>

		// Mode : Alternate
		case ALT:
			pGpio->MODE_R |= (state << (2*pinNum));
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	78b9      	ldrb	r1, [r7, #2]
 80002d2:	78fa      	ldrb	r2, [r7, #3]
 80002d4:	0052      	lsls	r2, r2, #1
 80002d6:	fa01 f202 	lsl.w	r2, r1, r2
 80002da:	431a      	orrs	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	601a      	str	r2, [r3, #0]
			break;
 80002e0:	e007      	b.n	80002f2 <GPIOx_init+0xc2>
			// #TODO
			break;

		// Fault : Invalid Mode
		default:
			fault = 1;
 80002e2:	2301      	movs	r3, #1
 80002e4:	73fb      	strb	r3, [r7, #15]
			break;
 80002e6:	e004      	b.n	80002f2 <GPIOx_init+0xc2>
			break;
 80002e8:	bf00      	nop
 80002ea:	e002      	b.n	80002f2 <GPIOx_init+0xc2>
			break;
 80002ec:	bf00      	nop
 80002ee:	e000      	b.n	80002f2 <GPIOx_init+0xc2>
			break;
 80002f0:	bf00      	nop
	}
	return fault;
 80002f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	3714      	adds	r7, #20
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bc80      	pop	{r7}
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <GPIOx_clk_en>:
 *
 *	note		:		Port clock should be enabled before anything else is done
 *
 *	ret			:		none
 */
void GPIOx_clk_en(gpio_hndlr_t* pGpio){
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
	// define an instance of the RCC handler
	rcc_hndlr_t* pRcc_handler = (rcc_hndlr_t*) RCC_BASE_ADDR;
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <GPIOx_clk_en+0x30>)
 800030a:	60fb      	str	r3, [r7, #12]

	// Loop through the gpio addresses
	uint8_t offset = get_gpio_addr_offset(pGpio);
 800030c:	6878      	ldr	r0, [r7, #4]
 800030e:	f7ff ff6b 	bl	80001e8 <get_gpio_addr_offset>
 8000312:	4603      	mov	r3, r0
 8000314:	72fb      	strb	r3, [r7, #11]
	// enable the GPIO at that offset
	pRcc_handler->RCC_AHB1_ENR |= (EN << offset);
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800031a:	7afb      	ldrb	r3, [r7, #11]
 800031c:	2101      	movs	r1, #1
 800031e:	fa01 f303 	lsl.w	r3, r1, r3
 8000322:	431a      	orrs	r2, r3
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000328:	bf00      	nop
 800032a:	3710      	adds	r7, #16
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40023800 	.word	0x40023800

08000334 <Gpiox_read>:
 *
 *	note		:	Port must be in INPUT mode
 *
 *	ret			:	1 or 0
 */
uint8_t Gpiox_read(gpio_hndlr_t* pGpio, uint8_t pinNum){
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	70fb      	strb	r3, [r7, #3]
	return ( pGpio->ID_R & (1 << pinNum) );
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	691b      	ldr	r3, [r3, #16]
 8000344:	b2da      	uxtb	r2, r3
 8000346:	78fb      	ldrb	r3, [r7, #3]
 8000348:	2101      	movs	r1, #1
 800034a:	fa01 f303 	lsl.w	r3, r1, r3
 800034e:	b2db      	uxtb	r3, r3
 8000350:	4013      	ands	r3, r2
 8000352:	b2db      	uxtb	r3, r3
}
 8000354:	4618      	mov	r0, r3
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr

0800035e <Gpiox_toggle>:
 *
 *	note		:		Pin Mode == OUTPUT
 *
 *	ret			:		None
 */
void Gpiox_toggle(gpio_hndlr_t* pGpio, uint8_t pinNum){
 800035e:	b480      	push	{r7}
 8000360:	b083      	sub	sp, #12
 8000362:	af00      	add	r7, sp, #0
 8000364:	6078      	str	r0, [r7, #4]
 8000366:	460b      	mov	r3, r1
 8000368:	70fb      	strb	r3, [r7, #3]
	pGpio->OD_R ^= (ON << pinNum);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	695a      	ldr	r2, [r3, #20]
 800036e:	78fb      	ldrb	r3, [r7, #3]
 8000370:	2101      	movs	r1, #1
 8000372:	fa01 f303 	lsl.w	r3, r1, r3
 8000376:	405a      	eors	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	615a      	str	r2, [r3, #20]
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	bc80      	pop	{r7}
 8000384:	4770      	bx	lr
	...

08000388 <main>:
gpio_hndlr_t* setup_Button();
gpio_hndlr_t* setup_LED();


int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
	gpio_hndlr_t* button = setup_Button();			// Button
 800038e:	f000 f81f 	bl	80003d0 <setup_Button>
 8000392:	60b8      	str	r0, [r7, #8]
	gpio_hndlr_t* led = setup_LED();
 8000394:	f000 f836 	bl	8000404 <setup_LED>
 8000398:	6078      	str	r0, [r7, #4]

	while(1){
		uint8_t state = Gpiox_read(button, 0);
 800039a:	2100      	movs	r1, #0
 800039c:	68b8      	ldr	r0, [r7, #8]
 800039e:	f7ff ffc9 	bl	8000334 <Gpiox_read>
 80003a2:	4603      	mov	r3, r0
 80003a4:	70fb      	strb	r3, [r7, #3]
		if(state){
 80003a6:	78fb      	ldrb	r3, [r7, #3]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d0f6      	beq.n	800039a <main+0x12>
			for(int i = 0; i < 300000; i++);
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	e002      	b.n	80003b8 <main+0x30>
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	3301      	adds	r3, #1
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	4a04      	ldr	r2, [pc, #16]	; (80003cc <main+0x44>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	ddf8      	ble.n	80003b2 <main+0x2a>
			Gpiox_toggle(led, 12);
 80003c0:	210c      	movs	r1, #12
 80003c2:	6878      	ldr	r0, [r7, #4]
 80003c4:	f7ff ffcb 	bl	800035e <Gpiox_toggle>
	while(1){
 80003c8:	e7e7      	b.n	800039a <main+0x12>
 80003ca:	bf00      	nop
 80003cc:	000493df 	.word	0x000493df

080003d0 <setup_Button>:

	/* Loop forever */
	for(;;);
}

gpio_hndlr_t* setup_Button(){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
	// Instantiate pointer
	gpio_hndlr_t* gpio_A = (gpio_hndlr_t*) GPIO_A_BASE_ADDR;
 80003d6:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <setup_Button+0x30>)
 80003d8:	607b      	str	r3, [r7, #4]

	// enable clock for port
	GPIOx_clk_en(gpio_A);
 80003da:	6878      	ldr	r0, [r7, #4]
 80003dc:	f7ff ff90 	bl	8000300 <GPIOx_clk_en>

	// instantiate the pin
	while( !(GPIOx_init(gpio_A, 0, INPUT, PULL_D)));
 80003e0:	bf00      	nop
 80003e2:	2302      	movs	r3, #2
 80003e4:	2200      	movs	r2, #0
 80003e6:	2100      	movs	r1, #0
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f7ff ff21 	bl	8000230 <GPIOx_init>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d0f6      	beq.n	80003e2 <setup_Button+0x12>

	return gpio_A;
 80003f4:	687b      	ldr	r3, [r7, #4]
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40020000 	.word	0x40020000

08000404 <setup_LED>:

gpio_hndlr_t*  setup_LED(){
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
	// base address of GPIO D
	gpio_hndlr_t* gpio_D = (gpio_hndlr_t*) GPIO_D_BASE_ADDR;
 800040a:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <setup_LED+0x30>)
 800040c:	607b      	str	r3, [r7, #4]

	// Enable ahb1 clock for gpio
	GPIOx_clk_en(gpio_D);
 800040e:	6878      	ldr	r0, [r7, #4]
 8000410:	f7ff ff76 	bl	8000300 <GPIOx_clk_en>

	// instantiate the gpio
	while( !(GPIOx_init(gpio_D, 12, OUTPUT, PUSH_P)) );
 8000414:	bf00      	nop
 8000416:	2300      	movs	r3, #0
 8000418:	2201      	movs	r2, #1
 800041a:	210c      	movs	r1, #12
 800041c:	6878      	ldr	r0, [r7, #4]
 800041e:	f7ff ff07 	bl	8000230 <GPIOx_init>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d0f6      	beq.n	8000416 <setup_LED+0x12>

	return gpio_D;
 8000428:	687b      	ldr	r3, [r7, #4]
}
 800042a:	4618      	mov	r0, r3
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40020c00 	.word	0x40020c00

08000438 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000438:	480d      	ldr	r0, [pc, #52]	; (8000470 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800043a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800043c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000440:	480c      	ldr	r0, [pc, #48]	; (8000474 <LoopForever+0x6>)
  ldr r1, =_edata
 8000442:	490d      	ldr	r1, [pc, #52]	; (8000478 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000444:	4a0d      	ldr	r2, [pc, #52]	; (800047c <LoopForever+0xe>)
  movs r3, #0
 8000446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000448:	e002      	b.n	8000450 <LoopCopyDataInit>

0800044a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800044a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800044c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044e:	3304      	adds	r3, #4

08000450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000454:	d3f9      	bcc.n	800044a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000456:	4a0a      	ldr	r2, [pc, #40]	; (8000480 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000458:	4c0a      	ldr	r4, [pc, #40]	; (8000484 <LoopForever+0x16>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800045c:	e001      	b.n	8000462 <LoopFillZerobss>

0800045e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000460:	3204      	adds	r2, #4

08000462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000464:	d3fb      	bcc.n	800045e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000466:	f000 f811 	bl	800048c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800046a:	f7ff ff8d 	bl	8000388 <main>

0800046e <LoopForever>:

LoopForever:
  b LoopForever
 800046e:	e7fe      	b.n	800046e <LoopForever>
  ldr   r0, =_estack
 8000470:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000478:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800047c:	080004f4 	.word	0x080004f4
  ldr r2, =_sbss
 8000480:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000484:	2000001c 	.word	0x2000001c

08000488 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000488:	e7fe      	b.n	8000488 <ADC_IRQHandler>
	...

0800048c <__libc_init_array>:
 800048c:	b570      	push	{r4, r5, r6, lr}
 800048e:	4d0d      	ldr	r5, [pc, #52]	; (80004c4 <__libc_init_array+0x38>)
 8000490:	4c0d      	ldr	r4, [pc, #52]	; (80004c8 <__libc_init_array+0x3c>)
 8000492:	1b64      	subs	r4, r4, r5
 8000494:	10a4      	asrs	r4, r4, #2
 8000496:	2600      	movs	r6, #0
 8000498:	42a6      	cmp	r6, r4
 800049a:	d109      	bne.n	80004b0 <__libc_init_array+0x24>
 800049c:	4d0b      	ldr	r5, [pc, #44]	; (80004cc <__libc_init_array+0x40>)
 800049e:	4c0c      	ldr	r4, [pc, #48]	; (80004d0 <__libc_init_array+0x44>)
 80004a0:	f000 f818 	bl	80004d4 <_init>
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	10a4      	asrs	r4, r4, #2
 80004a8:	2600      	movs	r6, #0
 80004aa:	42a6      	cmp	r6, r4
 80004ac:	d105      	bne.n	80004ba <__libc_init_array+0x2e>
 80004ae:	bd70      	pop	{r4, r5, r6, pc}
 80004b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b4:	4798      	blx	r3
 80004b6:	3601      	adds	r6, #1
 80004b8:	e7ee      	b.n	8000498 <__libc_init_array+0xc>
 80004ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80004be:	4798      	blx	r3
 80004c0:	3601      	adds	r6, #1
 80004c2:	e7f2      	b.n	80004aa <__libc_init_array+0x1e>
 80004c4:	080004ec 	.word	0x080004ec
 80004c8:	080004ec 	.word	0x080004ec
 80004cc:	080004ec 	.word	0x080004ec
 80004d0:	080004f0 	.word	0x080004f0

080004d4 <_init>:
 80004d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d6:	bf00      	nop
 80004d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004da:	bc08      	pop	{r3}
 80004dc:	469e      	mov	lr, r3
 80004de:	4770      	bx	lr

080004e0 <_fini>:
 80004e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e2:	bf00      	nop
 80004e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e6:	bc08      	pop	{r3}
 80004e8:	469e      	mov	lr, r3
 80004ea:	4770      	bx	lr
