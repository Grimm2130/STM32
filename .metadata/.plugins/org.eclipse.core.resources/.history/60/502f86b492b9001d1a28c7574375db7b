/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>


__attribute__((naked)) void trigger_SVC(uint8_t svc_code){
	asm volatile("MOV R1, #2");
	asm volatile("MOV R2, #2");
	asm volatile("SVC %[code]" :: [code]"c"(svc_code));
}


int main(void)
{
    /* Loop forever */
	trigger_SVC(23);
	for(;;);
}


__attribute__((naked)) void SVC_Handler(void){
	// read in and store the address of the stack pointer
	asm volatile("MRS R0, MSP");
//	// Get the value of the first operand
//	asm volatile("ADD R0, #4");			// Move to mem offset for op1 in r1
//	asm volatile("MOV R7, R0");			// Load in the value of op1 into reg 7
//	// Get the value of the second operand
//	asm volatile("ADD R0, #4");			// Move to mem offset for op2 in r2
//	asm volatile("MOV R8, R0");			// Load in the value of op2 into r8
	// Read in the value of the svc_op_code
	asm volatile("ADD R0, #26");		// Jump to pc location, -2 for the SVC  instruction
	asm volatile("LDR R9, [R0]");		// store the pc address
	asm volatile("AND R9, R9, #0xFF");	// retrieve the last 8 bits as the opcode
	// restore the value to R0, but as a value
	asm volatile("MOV R0, R9");
	// Jup the handler location,
	asm volatile("B svc_handler_c");	// #{TODO: Add function header to branch to}
}

void svc_handler_c(uint32_t spcode, uint32_t op1, uint32_t op2){
	printf("The operannds are: %ld\t%ld\t%ld\n", spcode, op1, op2);
}
