/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "stm32f4xx.h"
#include "stm32f4xx_gpio_driver.h"


gpio_hndlr_t* setup_Button();
gpio_hndlr_t* setup_LED();


int main(void)
{
	gpio_hndlr_t* button = setup_Button();			// Button
	gpio_hndlr_t* led = setup_LED();

	while(1){
		uint8_t state = Gpiox_read(button, 0);
		if(state){
			for(int i = 0; i < 60000; i++);
			if(state &= Gpiox_read(button, 0)){
				Gpiox_toggle(led, 12);
			}
		}
	}

	/* Loop forever */
	for(;;);
}

gpio_hndlr_t* setup_Button(){
	// Instantiate pointer
	gpio_hndlr_t* gpio_A = (gpio_hndlr_t*) GPIO_A_BASE_ADDR;

	// enable clock for port
	GPIOx_clk_en(gpio_A);

	// instantiate the pin
	GPIOx_init(gpio_A, 0, INPUT, PULL_D);

	return gpio_A;
}

gpio_hndlr_t*  setup_LED(){
	// base address of GPIO D
	gpio_hndlr_t* gpio_D = (gpio_hndlr_t*) GPIO_D_BASE_ADDR;

	// Enable ahb1 clock for gpio
	GPIOx_clk_en(gpio_D);

	// instantiate the gpio
	GPIOx_init(gpio_D, 12, OUTPUT, PUSH_P);

	return gpio_D;
}
