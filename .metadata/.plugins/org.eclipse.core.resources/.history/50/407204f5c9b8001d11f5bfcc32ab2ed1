/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

// Base address for the System Handler Control and State Register (Configurable)
#define SHCSR (* (uint32_t volatile*) 0xE000ED24)

// Bit locations for the Faults exception enable

#define MEM 16					// MEM
#define USAGE 18				// USAGE

/** Since the HARD faults are always enabled, there's no need to configure it **/

/**
 * Addresses System Interrupt Configuration registers
 */

void enable_usage_fault(){
	SHCSR |= (1 << USAGE);
}

__attribute__((naked)) void trigger_usage(){
	// Define the address of a function
	uint32_t* inst = 0x20001001;			// last bit should be one to ensure thumb instruction is being ran
	//Define the instruction to be ran at that location
	*inst = 0xFFFFFFFF;

	// Define a function pointer to that location
	void (*some_function) (void)= (void*) inst;

	// Dereference/call the function
	some_function();
}

int main(void)
{
	// enable the usage fault
	enable_usage_fault();

	// trigger the usage fault
	trigger_usage();
    /* Loop forever */
	for(;;);
}

void UsageFault_Handler(){
	printf("In usage fault handler\n");
}
