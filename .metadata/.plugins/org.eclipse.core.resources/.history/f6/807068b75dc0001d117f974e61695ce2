/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

// RCC
#define RCC_BASE_ADDR 				0x40023800U
#define RCC_CR_OFFSET 				0x00U
#define RCC_CFGR_OFFSET 			0x08U
#define RCC_AHB1ENR_OFFSET 			0x30

// HSE-config bit offset
#define HSE_SYS						0		//Set HSE as sytem clock, width : 2
#define HSE_IS_SYS					2		// Flag for system clock selection, width : 2
#define HSE_ON 						16		// HSE on or off
#define HSE_RDY 					17		// HSE ready or not


// MCO1
#define MCO1_SOURCE_OFFSET 			21	// width : 2
#define MCO1_SOURCE_PRE_OFFSET 		24	// width : 3

// GPIO
#define GPIO_A_BASE_ADDR			0x40020000U
#define GPIO_A_MODER_OFFSET			0x00U
#define GPIO_A_AFRH_OFFSET			0x24U

// GPIO_A
#define GPIO_EN_OFFSET				0
#define PORT_8_MODE_OFFSET			16 			// width : 2
#define PORT_8_ALT_FUNC_OFFSET		0 			// width : 4

// Alt_func





#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
	// Enable the HSE clock
	uint32_t volatile* const rcc_clk_ctrl_reg = (uint32_t*) (RCC_BASE_ADDR + RCC_CR_OFFSET);
	*rcc_clk_ctrl_reg |= (1 << HSE_ON);

	// SEt HSE as the system clock
	*rcc_clk_ctrl_reg |= (0x1 << HSE_SYS);

	// Wait until HSE clock is ready
	while( (!( (*rcc_clk_ctrl_reg) & (1 << HSE_RDY) )) && (((*rcc_clk_ctrl_reg) &= (0x1 << HSE_IS_SYS)) == 1) );

	// Set MCO1 to get it's source from the HSE register
	uint32_t volatile* const rcc_clk_config_reg = (uint32_t*) (RCC_BASE_ADDR + RCC_CFGR_OFFSET);
	*rcc_clk_config_reg |= (0x2 << MCO1_SOURCE_OFFSET);
	// Set pre-scaler for MC0 to 1/5
	*rcc_clk_config_reg |= (0x7 << MCO1_SOURCE_PRE_OFFSET);

	// Enable GPIO-A's clock on RCC
	uint32_t volatile* const rcc_per_clk_en_reg = (uint32_t*) (RCC_BASE_ADDR + RCC_AHB1ENR_OFFSET);
	*rcc_per_clk_en_reg |= ( 1 << GPIO_EN_OFFSET);

	// Set the mode of GPIO_A pin
	uint32_t volatile* const gpio_a_mode_reg = (uint32_t*) (GPIO_A_BASE_ADDR + GPIO_A_MODER_OFFSET);
	*gpio_a_mode_reg |= (0x2 << PORT_8_MODE_OFFSET);

	// Select for the alternate function of the port8
	uint32_t volatile* const gpio_a_alt_func_reg = (uint32_t*) (GPIO_A_BASE_ADDR + GPIO_A_AFRH_OFFSET);
	*gpio_a_alt_func_reg &= ~(0xF << PORT_8_ALT_FUNC_OFFSET);

    /* Loop forever */
	for(;;);
}
