/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>

/** -------------------------------------------------------------- **/
/**------------------- Address Definition ----------------- **/
/** -------------------------------------------------------------- **/
// Sys-tick Control Register
#define SYST_CSR (* (uint32_t volatile*) 0xE000E010)
// Sys-tick Reload Value Register
#define SYST_RVR (* (uint32_t volatile*) 0xE000E014)
// SysTick Current Value Register
#define SYST_CVR (* (uint32_t volatile*) 0xE000E018)

/** -------------------------------------------------------------- **/
/**------------------- Constants Definition ----------------- **/
/** -------------------------------------------------------------- **/


#define CPU_FREQ 16000000U
#define CPU_PERIOD (1.0/CPU_FREQ)

// SRAM
#define SRAM_START 0x20000000U
#define SRAM_SIZE (1024 * 128)
#define SRAM_END (SRAM_START + SRAM_SIZE)
/// Tasks
#define TASK_SIZE 1024U
#define TASK_1_START (SRAM_END)
#define TASK_2_START (SRAM_END - (TASK_SIZE))
#define TASK_3_START ( (SRAM_END) - ((2) * (TASK_SIZE)) )
#define TASK_4_START (SRAM_END - ((3) * (TASK_SIZE)))
#define SCHED_TASK_START (SRAM_END - ((4) * (TASK_SIZE)))

#define MAX_TASKS 4

/** -------------------------------------------------------------- **/
/**------------------- Global variables ----------------- **/
/** -------------------------------------------------------------- **/
// PC addresses for tasks
uint32_t volatile task_1_pc;
uint32_t volatile task_2_pc;
uint32_t volatile task_3_pc;
uint32_t volatile task_4_pc;

// PSP value of tasks
uint32_t psp_of_tasks[MAX_TASKS] = {TASK_1_START,
									TASK_2_START,
									TASK_3_START,
									TASK_4_START};

// Address of task handlers
/** -------------------------------------------------------------- **/
/**------------------- Configuration/Setup Functions ----------------- **/
/** -------------------------------------------------------------- **/

/**
 * Function to define the count down time for the scheduler
 * Calculates the count number (N) needed for the specified time and sets the SRVR to (N-1)
 *
 * Param(s):
 * 	time_ms: Frequency of the scheduler's exception in milli-seconds
 *
 * Return:
 * 	Void
 */
void set_scheduler_time(uint32_t time_ms){
	uint32_t reload_val = 0;
	reload_val = (uint32_t) ( (time_ms/(CPU_PERIOD*1000) ) -1 );
	// Clear SYST_RVR
	SYST_RVR &= ~(0x00FFFFFF);
	// Set SYST_RVR
	SYST_RVR |= reload_val;

	// Enable the Systick timer
	// Clock source = internal (1)
	// Count down to zero triggers interrupt (1)
	// Enable sys-tick interrupt (1)
	SYST_CSR |= 0x7;
}

// Function to initialize the scheduler task
__attribute__((naked)) void stack_init(uint32_t top_of_scheduler_stack){
	// Set MSP to point at the top of the scheduler stack
	asm volatile("MSR MSP, %0" : : "r"(top_of_scheduler_stack));
	asm volatile("BX LR");
}

/**
 * Function to instantiate the task's stacks with dummy values
 */
void init_tasks(void){
	// Define a variable for holding the current task's PSP
	uint32_t* curr_psp = NULL;
	for(uint8_t i = 0; i < MAX_TASKS; i++){
		// Get the current task
		curr_psp = psp_of_tasks[i];
		// initialize the xPSR
		curr_psp--;
		*curr_psp = (uint32_t) 0x01000000;
		// PC return address
		curr_psp--;

	}

}

__attribute__((naked)) void task2_init(){

}

/** -------------------------------------------------------------- **/
/**-------------------Task Handler Declarations ----------------- **/
/** -------------------------------------------------------------- **/
// Task Handlers
void task_1_handler(void);
void task_2_handler(void);
void task_3_handler(void);
void task_4_handler(void);

// Variable holding the number of the current task
uint8_t volatile curr_task = 0;

/** -------------------------------------------------------------- **/
/** ------------------------ Main Function ----------------------- **/
/** -------------------------------------------------------------- **/


int main(void)
{
	// Set the scheduler time for 1 ms
	set_scheduler_time(1);
	// initialize the scheduler stack pointer
	stack_init(SCHED_TASK_START);
    /* Loop forever */
	for(;;);
}

/** -------------------------------------------------------------- **/
/**-------------------Task Function Definitions ----------------- **/
/** -------------------------------------------------------------- **/

void task_1_handler(void){
	while(1){
		printf("In Task 1...\n");
	}
}


void task_2_handler(void){
	while(1)
		printf("In Task 2...\n");
}


void task_3_handler(void){
	while(1)
		printf("In Task 3...\n");
}


void task_4_handler(void){
	while(1)
		printf("In Task 4...\n");
}


//__attribute__((naked)) void SysTick_Handler(){
//	// We know that sys tick exception has pushed
//	// registers R[0:3],
//	// LR,
//	// PC return address for the previous task
//	// And xPSR (status) register for the previous task
//
//	// For for this step we do the following
//	// Push the remaining registers on to the stack PSP
//
//}
