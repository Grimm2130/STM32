/*
 * stm32f4xx.h
 *
 * System and Peripheral driver for the STM32F407VGt6
 *
 *  Created on: Mar 12, 2023
 *      Author: chimaochiagha
 */

#ifndef DRIVERS_INC_STM32F4XX_H_
#define DRIVERS_INC_STM32F4XX_H_

/*----------------------------------------------------------*/
/*------------------------- Addresses ----------------------*/
/*----------------------------------------------------------*/
#define FLASH_BASE_ADDR 			0x08000000U			// FLASH
#define	SRAM_BASE_ADDR	 			0x20000000U			// SRAM
#define ROM_BASE_ADDR				0x1FFF0000U			// ROM (boot loader)

/*-- BUSES --*/

// AHB
#define AHB1_BASE_ADDR				0x40020000U			// GPIOx, RCC, CRC, flash interface, bkpsram, DMA, Ethernet mac, USB_OTG_HS
#define AHB2_BASE_ADDR				0x50000000U			// USB_OTG_FS, DCMI, CRYP, RNG,
#define AHB3_BASE_ADDR				0xA0000000U			// FSMC. FSC

// APB
#define APB1_BASE_ADDR				0x40000000U
#define APB2_BASE_ADDR				0x40010000U
#define APB3_BASE_ADDR				0x40010000U

/*---- PERIPHERALS ----*/

// RCC
#define RCC_BASE_ADDR				0x40023800U

// GPIOx
#define GPIO_A_BASE_ADDR			0x40020000U
#define GPIO_B_BASE_ADDR			0x40020400U
#define GPIO_C_BASE_ADDR			0x40020800U
#define GPIO_D_BASE_ADDR			0x40020C00U
#define GPIO_E_BASE_ADDR			0x40021000U
#define GPIO_F_BASE_ADDR			0x40021400U
#define GPIO_G_BASE_ADDR			0x40021800U
#define GPIO_H_BASE_ADDR			0x40021C00U
#define GPIO_I_BASE_ADDR			0x40022000U
#define GPIO_J_BASE_ADDR			0x40022400U
#define GPIO_K_BASE_ADDR			0x40022800U



/*----------------------------------------------------------*/
/*-------------------------- Structs -----------------------*/
/*----------------------------------------------------------*/

/*
 * RCC peripheral encapsulation
 */
typedef struct{
	uint32_t volatile RCC_CR;
	uint32_t volatile RCC_PLL_CFGR;
	uint32_t volatile RCC_CFGR;
	uint32_t volatile RCC_CIR;

	uint32_t volatile RCC_AHB1_RSTR;
	uint32_t volatile RCC_AHB2_RSTR;
	uint32_t volatile RCC_AHB3_RSTR;

	uint32_t volatile reserved_1;

	uint32_t volatile RCC_APB1_RSTR;
	uint32_t volatile RCC_APB2_RSTR;

	uint32_t volatile reserved_2;
	uint32_t volatile reserved_3;

	uint32_t volatile RCC_AHB1_ENR;
	uint32_t volatile RCC_AHB2_ENR;
	uint32_t volatile RCC_AHB3_ENR;

	uint32_t volatile reserved_4;

	uint32_t volatile RCC_APB1_ENR;
	uint32_t volatile RCC_APB2_ENR;

	uint32_t volatile reserved_5;
	uint32_t volatile reserved_6;

	uint32_t volatile RCC_AHB1_LP_ENR;
	uint32_t volatile RCC_AHB2_LP_ENR;
	uint32_t volatile RCC_AHB3_LP_ENR;

	uint32_t volatile reserved_7;

	uint32_t volatile RCC_APB1_LP_ENR;
	uint32_t volatile RCC_APB2_LP_ENR;

	uint32_t volatile reserved_8;
	uint32_t volatile reserved_9;

	uint32_t volatile RCC_BDCR;
	uint32_t volatile RCC_CSR;

	uint32_t volatile reserved_10;
	uint32_t volatile reserved_11;

	uint32_t volatile RCC_SSCGR;
	uint32_t volatile RCC_PLLI2SC_FGR;

} rcc_regs_t;


/*
 * GPIOx Peripheral Encapsulation
 * All Addressable registers and associated bits are available when Gpio base address is mapped from this struct
 */
typedef struct{

} gpio_regs_t;

#endif /* DRIVERS_INC_STM32F4XX_H_ */
