/*
 * stm32f4xx.h
 *
 * System and Peripheral driver for the STM32F407VGt6
 *
 *  Created on: Mar 12, 2023
 *      Author: chimaochiagha
 */

#ifndef DRIVERS_INC_STM32F4XX_H_
#define DRIVERS_INC_STM32F4XX_H_

#include <stdint.h>

/*----------------------------------------------------------*/
/*------------------------- Addresses ----------------------*/
/*----------------------------------------------------------*/
#define FLASH_BASE_ADDR 			0x08000000U			// FLASH
#define	SRAM_BASE_ADDR	 			0x20000000U			// SRAM
#define ROM_BASE_ADDR				0x1FFF0000U			// ROM (boot loader)

/*-- BUSES --*/

// AHB
#define AHB1_BASE_ADDR				0x40020000U			// GPIOx, RCC, CRC, flash interface, bkpsram, DMA, Ethernet mac, USB_OTG_HS
#define AHB2_BASE_ADDR				0x50000000U			// USB_OTG_FS, DCMI, CRYP, RNG,
#define AHB3_BASE_ADDR				0xA0000000U			// FSMC. FSC

// APB
#define APB1_BASE_ADDR				0x40000000U
#define APB2_BASE_ADDR				0x40010000U


/* --- Configuration Registers ---*/
#define SYSCFG						0x40013800U


/*---- PERIPHERALS ----*/

// RCC  Engine
#define RCC_BASE_ADDR				0x40023800U

// GPIOx
#define GPIO_A_BASE_ADDR			0x40020000U
#define GPIO_B_BASE_ADDR			0x40020400U
#define GPIO_C_BASE_ADDR			0x40020800U
#define GPIO_D_BASE_ADDR			0x40020C00U
#define GPIO_E_BASE_ADDR			0x40021000U
#define GPIO_F_BASE_ADDR			0x40021400U
#define GPIO_G_BASE_ADDR			0x40021800U
#define GPIO_H_BASE_ADDR			0x40021C00U
#define GPIO_I_BASE_ADDR			0x40022000U
#define GPIO_J_BASE_ADDR			0x40022400U
#define GPIO_K_BASE_ADDR			0x40022800U

#define GPIOx_ADDR_OFF				0x400U


/*-------- INTERRUPTS ---------------*/

/* ---------- Nested Vector Interrupt Control ----------*/
#define NVIC_ISER_BASE_ADDR			0xE000E100U
#define NVIC_ICER_BASE_ADDR			0XE000E180U
#define NVIC_ISPR_BASE_ADDR			0XE000E200U
#define NVIC_ICPR_BASE_ADDR			0XE000E280U
#define NVIC_IABR_BASE_ADDR			0xE000E300U
#define NVIC_IPR_BASE_ADDR			0xE000E400U
#define STIR_BASE_ADDR				0xE000EF00U


/*------ External Interrupt --------*/
#define EXTI_BASE_ADDR				0x40013C00U


/*----------------------------------------------------------*/
/*-------------------------- Macros-----------------------*/
/*----------------------------------------------------------*/

#define EN				 			0x1U
#define DIS							0x0U


/*----------------------------------------------------------*/
/*-------------------------- Structs -----------------------*/
/*----------------------------------------------------------*/

/*
 * RCC peripheral encapsulation
 */
typedef struct{
	uint32_t volatile RCC_CR;
	uint32_t volatile RCC_PLL_CFGR;
	uint32_t volatile RCC_CFGR;
	uint32_t volatile RCC_CIR;

	uint32_t volatile RCC_AHB1_RSTR;
	uint32_t volatile RCC_AHB2_RSTR;
	uint32_t volatile RCC_AHB3_RSTR;

	uint32_t volatile reserved_1;

	uint32_t volatile RCC_APB1_RSTR;
	uint32_t volatile RCC_APB2_RSTR;

	uint32_t volatile reserved_2;
	uint32_t volatile reserved_3;

	uint32_t volatile RCC_AHB1_ENR;
	uint32_t volatile RCC_AHB2_ENR;
	uint32_t volatile RCC_AHB3_ENR;

	uint32_t volatile reserved_4;

	uint32_t volatile RCC_APB1_ENR;
	uint32_t volatile RCC_APB2_ENR;

	uint32_t volatile reserved_5;
	uint32_t volatile reserved_6;

	uint32_t volatile RCC_AHB1_LP_ENR;
	uint32_t volatile RCC_AHB2_LP_ENR;
	uint32_t volatile RCC_AHB3_LP_ENR;

	uint32_t volatile reserved_7;

	uint32_t volatile RCC_APB1_LP_ENR;
	uint32_t volatile RCC_APB2_LP_ENR;

	uint32_t volatile reserved_8;
	uint32_t volatile reserved_9;

	uint32_t volatile RCC_BDCR;
	uint32_t volatile RCC_CSR;

	uint32_t volatile reserved_10;
	uint32_t volatile reserved_11;

	uint32_t volatile RCC_SSCGR;
	uint32_t volatile RCC_PLLI2SC_FGR;

} rcc_hndlr_t;


/*
 * GPIOx Peripheral Encapsulation
 * All Addressable registers and associated bits are available when Gpio base address is mapped from this struct
 */
typedef struct{
	uint32_t volatile MODE_R;
	uint32_t volatile OTYPE_R;
	uint32_t volatile OSPEED_R;
	uint32_t volatile PU_PD_R;
	uint32_t volatile ID_R;
	uint32_t volatile OD_R;
	uint32_t volatile BSS_R;
	uint32_t volatile LCK_R;
	uint32_t volatile AFL_R;
	uint32_t volatile AFH_R;
} gpio_hndlr_t;


/**
 * System Configuration Controller
 * This is used to specify remap the memory accessible in the code area,
 * select the Ethernet PHY interface and manage the external interrupt line connection to the GPIOs.
 */
typedef struct{
	uint32_t volatile SYSCFG_MEMRMP;				// Configures Memory remap
	uint32_t volatile SYSCFG_PMC;					// Ethernet PHY config
	uint32_t volatile SYSCFG_EXTI_CR1;				// GPio External intr GPIOx pin selection [0 : 3]
	uint32_t volatile SYSCFG_EXTI_CR2;				// GPio External intr GPIOx pin selection [4 : 7]
	uint32_t volatile SYSCFG_EXTI_CR3;				// GPio External intr GPIOx pin selection [8 : 11]
	uint32_t volatile SYSCFG_EXTI_CR4;				// GPio External intr GPIOx pin selection [12 : 15]
	uint32_t volatile SYSCFG_CMP_CR;				// Compensation en/dis and status
} sys_cnfg_hndlr_t;


/**
 * External Interrupt Controller Register
 * Struct to make configurations to the registers in the External interrupt address space
 */
typedef struct{
	uint32_t volatile EXT_IMR;
	uint32_t volatile EXTI_EMR;
	uint32_t volatile EXTI_RTSR;
	uint32_t volatile EXTI_FTSR;
	uint32_t volatile EXTI_SWIER;
	uint32_t volatile EXTI_PR;
} exti_hndlr_t;


/**
 * Nested Vector Interrupt Configurator - Set/Enable registers
 * Struct for manipulating the NVIC register Set enable registers
 * - Writing '1' Sets interrupt
 * - Reading '1' interrupt is set
 */
typedef struct{
	uint32_t volatile NVIC_ISER_0;			// NVIC [0 : 31]
	uint32_t volatile NVIC_ISER_1;			// NVIC [32 : 63]
	uint32_t volatile NVIC_ISER_2;
	uint32_t volatile NVIC_ISER_3;
	uint32_t volatile NVIC_ISER_4;
	uint32_t volatile NVIC_ISER_5;
	uint32_t volatile NVIC_ISER_6;
	uint32_t volatile NVIC_ISER_7;
} nvic_iser_handler_t;

/**
 * Nested Vector Interrupt Configurator - Clear (W) /Enabled (R) registers
 * Struct for manipulating the NVIC register Clear enable registers
 * - Writing '1' Clears interrupt
 * - Reading '1' interrupt is set
 */
typedef struct{
	uint32_t volatile NVIC_ICER_0;			// NVIC [0 : 31]
	uint32_t volatile NVIC_ICER_1;			// NVIC [32 : 63]
	uint32_t volatile NVIC_ICER_2;
	uint32_t volatile NVIC_ICER_3;
	uint32_t volatile NVIC_ICER_4;
	uint32_t volatile NVIC_ICER_5;
	uint32_t volatile NVIC_ICER_6;
	uint32_t volatile NVIC_ICER_7;
} nvic_iser_handler_t;
#endif /* DRIVERS_INC_STM32F4XX_H_ */
