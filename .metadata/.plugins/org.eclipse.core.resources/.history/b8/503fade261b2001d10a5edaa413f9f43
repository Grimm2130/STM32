/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

// RCC AHB1 clock enable
#define RCC_AHB1_CLK_EN (*(uint32_t*) 0x40023830)

/** ADDRESS OFFSETS **/
#define MODE_OFFSET 0x00													// mode address offset
#define PULL_UP_DOWN_OFFSET 0x0C											// pull up/down offset
#define INPUT_DATA_OFFSET 0x10												// input data offset
#define OUTPUT_DATA_OFFSET 0x14												// output data offset

/*** INPUTS ***/
// GPI0A addresses
#define GPIO_A_BASE_ADDR 0x40020000											// Base Address
// Register access
#define GPIO_A_MODE_ADDR (*(volatile uint32_t*) (GPIO_A_BASE_ADDR + MODE_OFFSET))		// Mode register
#define GPIO_A_PULL_UP_DOWN (*(volatile uint32_t*) (GPIO_A_BASE_ADDR + PULL_UP_DOWN_OFFSET))				// Pull up/down register
#define GPIO_A_INPUT_DATA_REG (*(volatile uint32_t*) (GPIO_A_BASE_ADDR + INPUT_DATA_OFFSET))
/*** OUTPUTS ***/

// GPIOB addresses
#define GPIO_D_BASE_ADDR 0x40020C00
// register access
#define GPIO_D_MODE_ADDR (*(volatile uint32_t*) (GPIO_D_BASE_ADDR + MODE_OFFSET))		// Mode register
#define GPIO_D_OUTPUT_DATA_REG (*(volatile uint32_t*) (GPIO_D_BASE_ADDR + OUTPUT_DATA_OFFSET))


/**
 * Description:
 *
 * 	A key press should trigger a print statement of the key that was pressed
 * 	- As input ports, we'll be using PORTA [0:3]
 * 	- As output ports, we'll be using PORTB ([0:3],[12;15]) => ( keypad, LEDs)
 *
 */

/*--------------------*/
/** GLOBAL VARIABLES **/
/*--------------------*/

// define a 2d matrix for holding the keys

const char keys[4][4] = {
	{'1','2','3','A'},
	{'4','5','6','B'},
	{'7','8','9','C'},
	{'*','0','#','D'}
};

void setupPins(){
	// enable the clock for gpios A and D
	RCC_AHB1_CLK_EN |= 0x9;

	// Set up port A as an input register
	GPIO_A_MODE_ADDR &= ~(0xFF);		// set mode pins 0 - 3 as inputs
	GPIO_A_PULL_UP_DOWN |= 0x55;		// Set the input port to pull up mode

	// Set up port D as an output register
	GPIO_D_MODE_ADDR |= 0x55000055;		// set as output port 0 - 3 & 12 - 15
	GPIO_D_OUTPUT_DATA_REG |= 0xF;		// output high for pins 0 - 3
}

/**
 * Function to check if all the pins are attached to pull up registers
 */
int testInputSetup(){
	uint8_t val = 0;
	for(uint8_t i = 0; i < 4; i++){
		val += ((GPIO_A_INPUT_DATA_REG >> i) & 1);
	}
	return val;
}

/**
 * Function to check inputs (cols) for a pushed key
 */
uint8_t checkPins(){
	uint8_t pinPos = -1;
	// Loop through the input pins
	for(uint8_t i = 0; i < 4; i++){
		// Check for push
		uint8_t check = ((GPIO_A_INPUT_DATA_REG >> i) & 1);
		// delay for 150 ms (debouncing)
		for(uint8_t del = 0; del < 50000; del++);
		// Check in again and and to previous value
		check |= ((GPIO_A_INPUT_DATA_REG >> i) & 1);
		// Check if pin push is still valid
		if(check == 0){
			pinPos = i;
			break;
		}
	}
	return pinPos;
}


int main(void){
	// Setup the register values
	setupPins();
	// Check if the input pins are pull - up
	uint8_t val = testInputSetup();
	if(val == 4){
		printf("Setup Done!\n");
	}
	else{
		printf("Something's wrong\n");
		printf("Val is %d\n", val);
	}
	// Begin key pad logic
	while(1){
		// Iterate through the rows and turn them all off
		for(uint8_t i = 0; i < 4; i++){
			// set/reset the pin
			uint8_t pinPos = -1;
			// Ground the row
			GPIO_D_OUTPUT_DATA_REG &= ~(1 << i);
			// Check for a pin press
			pinPos = checkPins();
			// Check a valid key press was detected
			if(pinPos != -1){
				// Indicate a key was pressed
				printf("Key %c was pressed\n", keys[i][pinPos]);
				// Toggle the LED
				GPIO_D_OUTPUT_DATA_REG ^= (1 << 12);
			}
			// Set row high again
			GPIO_D_OUTPUT_DATA_REG |= (1 << i);
		}
	}
}
