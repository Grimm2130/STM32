/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

// RCC
#define RCC_BASE_ADDR 				0x40023800U
#define RCC_AHB1ENR_OFF 			0x30U

// NVIC
#define NVIC_ISER0 					0xE000E100U			// IRQ [0:31]


// EXTI0
#define SYSCFG_BASE_ADDR			0x40013800U
#define SYSCFG_EXTICR1_OFF	  		0x08U

//GPIO
#define GPIO_A_BASE_ADDR			0x40020000
#define GPIOx_MODER_OFF				0x00U
#define GPIOx_PUPDR_OFF 			0x0CU
#define GPIOx_IDR_OFF				0x10U

// Bit positions
// RCC reg
#define GPIO_EN						0

// NVIC
#define NVIC_EXTI0_EN					6

// SYSCNFG
#define ENTI0_SRC_SET				0			//width : 4

// GPIO reg
#define PRT_A_BIT_START_MODE_X_PUPDR	0 			// Width : 2


/* -------------------------- Function Dec.s ------------------------*/
void en_ints();
void setup_button();



int main(void)
{
	// Setup button
	setup_button();

	// Enable interrupts
	en_ints();
    /* Loop forever */
	for(;;);
}


/* ------------------------- Function Defs ---------------------*/
/**
 * Function to enable the Nested vector interrupts and the instantiate the external interrupts
 */
void en_ints(){
	// Enable EXTI0 interrupt on the NVIC bus
	uint32_t volatile* const nvic_set_en = (uint32_t *) (NVIC_ISER0);
	*nvic_set_en |= (1 << NVIC_EXTI0_EN);

	// Set the source of the EXTI0 interrupt
	uint32_t volatile* const sys_exti_cnfg_ptr = (uint32_t *) (SYSCFG_BASE_ADDR + SYSCFG_EXTICR1_OFF);
	*sys_exti_cnfg_ptr &= ~(0xF << ENTI0_SRC_SET);
}

/**
 * Function to enable Port_A 0
 */
void setup_button(){
	// Enable the port A' clock on the AHB1 bus
	uint32_t volatile* const rcc_ahb1_clk_en_ptr = (uint32_t *) (RCC_BASE_ADDR + RCC_AHB1ENR_OFF);
	*rcc_ahb1_clk_en_ptr |= (1 << GPIO_EN);

	// Set Port A's mode as input
	uint32_t volatile* const port_a_mode_ptr = (uint32_t *) (GPIO_A_BASE_ADDR + GPIOx_MODER_OFF);
	*port_a_mode_ptr &= ~(0x3 << PRT_A_BIT_START_MODE_PUPDR);

	// Set port as pull down
	uint32_t volatile* const port_a_pupdr_ptr = (uint32_t *) (GPIO_A_BASE_ADDR + GPIOx_PUPDR_OFF);
	*port_a_pupdr_ptr |= (0x2 << PRT_A_BIT_START_MODE_X_PUPDR);

}
void EXTI0_IRQHandler(){
	printf("Button Pushed");
}
