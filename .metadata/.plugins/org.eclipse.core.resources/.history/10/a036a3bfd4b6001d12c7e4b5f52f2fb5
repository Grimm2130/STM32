/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

/**
 * Define the memory addresses to be worked with
 */

#define SRAM_START 0x20000000U		// SRAM start address
#define SRAM_END ( (SRAM_START) +  0x)

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


/**
 * Function to generate an interrupt
 */
void generate_interrupt()
{


}

/**
 * Function handler to change SP from MSP to SP
 */
void RTC_WKUP_IRQHandler(void)
{
	uint32_t addr = 0;
	__asm volatile("MOV R4, R13");			// Read in the address of the Stack pointer
	__asm volatile("ADD R4, R4, #512");		// add 512 Bytes to the address
	__asm volatile("MSR PSP, R4");			// initialize PSP to that address
	__asm volatile("MOV %0, R4": "=r"(addr));	// Store the new address for printing to the consol

	// Print to the console
	printf("\"PSP\" initialized to addr: %x\n", addr);
}

int main(void)
{
	// Generate the interrupt
	generate_interrupt();
    /* Loop forever */
	for(;;);
}
